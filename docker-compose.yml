services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: django-class-based-db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: Password_2547422
      MYSQL_DATABASE: django
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: django-class-based-api
    restart: unless-stopped
    environment:
      # Django Configuration
      DJANGO_SECRET_KEY: django-secret-key-for-development
      DEBUG: "True"
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0
      DJANGO_ENV: development

      # Database Configuration
      DB_TYPE: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: Password_2547422
      DB_NAME: django

      # JWT Configuration
      JWT_SECRET: jwt-secret-key-change-this-in-production
      JWT_TOKEN_EXPIRY: 3600
      JWT_REFRESH_SECRET: jwt-refresh-secret-key-change-this
      JWT_REFRESH_EXPIRY: 604800

      # Rate Limiting
      RATE_LIMIT_TTL: 60
      RATE_LIMIT_LIMIT: 100

      # Logging
      LOG_LEVEL: INFO

      # CORS Settings
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000

      # Seeding
      SEED_DATABASE: "true"

      # Optional: Create superuser
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      DJANGO_SUPERUSER_PASSWORD: admin123

      # Gunicorn Settings
      GUNICORN_WORKERS: 4
      GUNICORN_TIMEOUT: 30

    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching (Optional)
  # redis:
  #   image: redis:7-alpine
  #   container_name: django-class-based-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Nginx Reverse Proxy (Optional)
  # nginx:
  #   image: nginx:alpine
  #   container_name: django-auth-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - static_volume:/app/staticfiles
  #     - media_volume:/app/media
  #   depends_on:
  #     - api

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  default:
    name: django-class-based-network
